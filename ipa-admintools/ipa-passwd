#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Tempal Place, Suite 330, Boston, MA 02111-1307 USA
#
import sys
try:
    from optparse import OptionParser
    import ipa
    import ipa.ipaclient as ipaclient
    import ipa.config

    import xmlrpclib
    import kerberos
    import krbV
    import ldap
    import getpass
    import errno
    import socket
except ImportError:
    print >> sys.stderr, """\
There was a problem importing one of the required Python modules. The
error was:

    %s
""" % sys.exc_value
    sys.exit(1)

def usage():
    print "ipa-passwd [-v|--verbose] [user]"
    sys.exit(1)

def parse_options():
    parser = OptionParser()
    parser.add_option("--usage", action="store_true",
                      help="Program usage")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                      help="Verbose output of the XML-RPC connection")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def get_principal(krbctx):
    try:
        ccache = krbctx.default_ccache()
        cprinc = ccache.principal()
    except krbV.Krb5Error, e:
        #TODO: do a kinit
        print "Unable to get kerberos principal: %s" % e[1]
        return None

    return cprinc.name

def main():
    match = False
    username = None
    principal = None

    options, args = parse_options()

    if options.usage:
        usage()

    krbctx = krbV.default_context()

    if len(args) == 2:
        username = args[1]
    else:
        principal = get_principal(krbctx)
        if principal is None:
            return 1

    if not principal:
        u = username.split('@')
        if len(u) > 2 or len(u) == 0:
            print "Invalid user name (%s)" % username
        if len(u) == 1:
            principal = username+"@"+krbctx.default_realm
        else:
            principal = username

    print "Changing password for %s" % principal

    try:
        while (match != True):
            # No syntax checking of the password is required because that is
            # done on the server side
            password = getpass.getpass("  New Password: ")
            confirm = getpass.getpass("  Confirm Password: ")
            if (password != confirm):
                print "Passwords do not match"
                match = False
            elif (len(password) < 1):
                print "Password cannot be empty"
                match = False
            else:
                match = True
    except KeyboardInterrupt:
        print ""
        print "Password change cancelled"
        return 1

    client = ipaclient.IPAClient(verbose=options.verbose)
    client.modifyPassword(principal, '', password)

    return 0

try:
    if __name__ == "__main__":
        sys.exit(main())
except SystemExit, e:
    sys.exit(e)
except KeyboardInterrupt, e:
    sys.exit(1)
except xmlrpclib.Fault, fault:
    if fault.faultCode == errno.ECONNREFUSED:
        print "The IPA XML-RPC service is not responding."
    else:
        print fault.faultString
    sys.exit(1)
except kerberos.GSSError, e:
    print "Could not initialize GSSAPI: %s/%s" % (e[0][0], e[0][1])
    sys.exit(1)
except xmlrpclib.ProtocolError, e:
    print "Unable to connect to IPA server: %s" % (e.errmsg)
    sys.exit(1)
except ipa.ipaerror.IPAError, e:
    print "%s" % (e.message)
    sys.exit(1)
except socket.error, e:
    print e[1]
    print "Re-run with -v flag for more details."
except Exception, e:
    print "%s" % str(e)
    sys.exit(1)
