#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2008  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
import sys
try:
    from optparse import OptionParser
    import ipa
    import ipa.entity
    import ipa.ipaclient as ipaclient
    import ipa.config

    import xmlrpclib
    import kerberos
    import errno
    import validate
    import socket
except ImportError:
    print >> sys.stderr, """\
There was a problem importing one of the required Python modules. The
error was:

    %s
""" % sys.exc_value
    sys.exit(1)

def parse_options():
    usage  = "%prog [options]\n"
    usage += "%prog --show"
    parser = OptionParser(usage=usage, formatter=ipa.config.IPAFormatter())
    parser.add_option("--maxusername", dest="maxusername",
                      help="Max. Length of a username")
    parser.add_option("--homedir", dest="homedir",
                      help="Default location of home directories")
    parser.add_option("--defaultshell", dest="defaultshell",
                      help="Default shell for new users")
    parser.add_option("--defaultgroup", dest="defaultgroup",
                      help="Default group for new users")
    parser.add_option("--emaildomain", dest="emaildomain",
                      help="Default e-mail domain")
    parser.add_option("--searchtimelimit", dest="searchtimelimit",
                      help="Max. amount of time (sec.) for a search (-1 is unlimited)")
    parser.add_option("--searchrecordslimit", dest="searchrecordslimit",
                      help="Max. number of records to search (-1 is unlimited)")
    parser.add_option("--usersearch", dest="usersearch",
                      help="A comma-separated list of fields to search when searching for users")
    parser.add_option("--groupsearch", dest="groupsearch",
                      help="A comma-separated list of fields to search when searching for groups")
    parser.add_option("--show", dest="show", action="store_true",
                      help="Show the current configuration")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                      help="Verbose output of the XML-RPC connection")

    ipa.config.add_standard_options(parser)
    options, args = parser.parse_args()
    ipa.config.verify_args(parser, args)

    if not options.show and not options.maxusername and not options.homedir and not options.defaultshell and not options.defaultgroup and not options.emaildomain and not options.searchtimelimit and not options.searchrecordslimit and not options.usersearch and not options.groupsearch:
        parser.error("nothing to do")

    ipa.config.init_config(options)

    return options, args

def show_config(client):
    policy = client.get_ipa_config()
    print "Search Configuration"
    print "  Search Time Limit (sec.): %s" % policy.getValues('ipaSearchTimeLimit')
    print "  Search Records Limit: %s" % policy.getValues('ipaSearchRecordsLimit')
    print "  User Search Fields: %s" % policy.getValues('ipaUserSearchFields')
    print "  Group Search Fields: %s" % policy.getValues('ipaGroupSearchFields')

    print ""

    print "User Settings"
    print "  Max. Username Length: %s" % policy.getValues('ipaMaxUsernameLength')
    print "  Root for Home Directories: %s" % policy.getValues('ipaHomesRootDir')
    print "  Default Shell: %s" % policy.getValues('ipaDefaultLoginShell')
    print "  Default User Group: %s" % policy.getValues('ipaDefaultPrimaryGroup')
    print "Default E-mail Domain: %s" % policy.getValues('ipaDefaultEmailDomain')

def update_policy(client, options):
    current = client.get_ipa_config()

    new = ipa.entity.Entity(current.toDict())

    try:
        if options.maxusername:
            validate.is_integer(options.maxusername, min=1)
            new.setValue('ipamaxusernamelength', options.maxusername)
        if options.homedir:
            validate.is_string(options.homedir)
            new.setValue('ipahomesrootdir', options.homedir)
        if options.defaultshell:
            validate.is_string(options.defaultshell)
            new.setValue('ipadefaultloginshell', options.history)
        if options.defaultgroup:
            new.setValue('ipadefaultprimarygroup', options.defaultgroup)
        if options.emaildomain:
            new.setValue('ipadefaultemaildomain', options.emaildomain)
        if options.searchtimelimit:
            validate.is_integer(options.searchtimelimit, min=-1)
            new.setValue('ipasearchtimelimit', options.searchtimelimit)
        if options.searchrecordslimit:
            validate.is_integer(options.searchrecordslimit, min=-1)
            new.setValue('ipasearchrecordslimit', options.searchrecordslimit)
        if options.usersearch:
            new.setValue('ipausersearchfields', options.usersearch)
        if options.groupsearch:
            new.setValue('ipagroupsearchfields', options.groupsearch)
    except validate.VdtTypeError, e:
        print "%s" % str(e)
        return 1
    except validate.VdtValueTooSmallError, e:
        print "%s" % str(e)
        return 1

    client.update_ipa_config(new)

    if options.usersearch or options.groupsearch:
        print "WARNING: Be sure that the attributes in User and Group search are indexed in the Directory Server or you may suffer a performance loss."

def main():
    options, args = parse_options()

    client = ipaclient.IPAClient(verbose=options.verbose)

    if options.show:
        show_config(client)
        return 0

    if update_policy(client, options):
        return 1

    print "Update successful."

    return 0

try:
    if __name__ == "__main__":
        sys.exit(main())
except SystemExit, e:
    sys.exit(e)
except KeyboardInterrupt, e:
    sys.exit(1)
except xmlrpclib.Fault, fault:
    if fault.faultCode == errno.ECONNREFUSED:
        print "The IPA XML-RPC service is not responding."
    else:
        print fault.faultString
    sys.exit(1)
except kerberos.GSSError, e:
    print "Could not initialize GSSAPI: %s/%s" % (e[0][0], e[0][1])
    sys.exit(1)
except xmlrpclib.ProtocolError, e:
    print "Unable to connect to IPA server: %s" % (e.errmsg)
    sys.exit(1)
except ipa.ipaerror.IPAError, e:
    print "%s" % (e.msg)
    sys.exit(1)
except socket.error, e:
    print e[1]
    print "Re-run with -v flag for more details."
except Exception, e:
    print "%s" % str(e)
    sys.exit(1)
