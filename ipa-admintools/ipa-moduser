#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
import sys
try:
    from optparse import OptionParser
    import ipa
    import ipa.user
    import ipa.ipaclient as ipaclient
    import ipa.ipavalidate as ipavalidate
    import ipa.ipautil as ipautil
    import ipa.config

    import xmlrpclib
    import kerberos
    import ldap
    import errno
    import socket
except ImportError:
    print >> sys.stderr, """\
There was a problem importing one of the required Python modules. The
error was:

    %s
""" % sys.exc_value
    sys.exit(1)

def set_add_usage(which):
    print "%s option usage: --%s NAME=VALUE" % (which, which)

def parse_options():
    usage = "%prog --list\n"
    usage = "%prog [options] user"
    parser = OptionParser(usage=usage, formatter=ipa.config.IPAFormatter())
    parser.add_option("-a", "--activate", dest="activate", action="store_true",
                      help="Activate the user")
    parser.add_option("-c", "--gecos", dest="gecos",
                      help="Set the GECOS field")
    parser.add_option("-d", "--directory", dest="directory",
                      help="Set the User's home directory")
    parser.add_option("-f", "--firstname", dest="gn",
                      help="User's first name")
    parser.add_option("-l", "--lastname", dest="sn",
                      help="User's last name")
    parser.add_option("-s", "--shell", dest="shell",
                      help="Set user's login shell to shell")
    parser.add_option("--addattr", dest="addattr",
                      help="Adds an attribute or values to that attribute, attr=value",
                      action="append")
    parser.add_option("--delattr", dest="delattr",
                      help="Remove an attribute", action="append")
    parser.add_option("--setattr", dest="setattr",
                      help="Set an attribute, dropping any existing values that may exist",
                      action="append")
    parser.add_option("--list", dest="list", action="store_true",
                      help="List common attributes (this is not an exhaustive list)")
    parser.add_option("-M", "--mailAddress", dest="mail",
                      help="Set user's e-mail address")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                      help="Verbose output of the XML-RPC connection")

    ipa.config.add_standard_options(parser)
    options, args = parser.parse_args()

    if not options.list:
        ipa.config.verify_args(parser, args, "user")

    ipa.config.init_config(options)

    return options, args

def main():
    # The following fields are required
    givenname = ""
    lastname = ""
    username = ""
    mail = ""
    gecos = ""
    directory = ""
    groups = ""
    shell = ""

    match = False

    options, args = parse_options()

    if options.list:
        client = ipaclient.IPAClient(verbose=options.verbose)
        list = client.get_all_attrs()

        for x in list:
            print x
        return 0

    username = args[0]

    client = ipaclient.IPAClient(verbose=options.verbose)
    try:
        attrs = ['*']

        # in case any attributes being modified are operational such as
        # nsaccountlock. Any attribute to be deleted needs to be included
        # in the original record so it can be seen as being removed.
        if options.delattr:
            for d in options.delattr:
                attrs.append(d)
        user = client.get_user_by_uid(username, sattrs=attrs)
    except ipa.ipaerror.exception_for(ipa.ipaerror.LDAP_NOT_FOUND):
        print "User %s not found" % username
        return 1
    except:
        raise

    # If any options are set we use just those. Otherwise ask for all of them.
    if options.gn or options.sn or options.directory or options.gecos or options.mail or options.shell or options.addattr or options.delattr or options.setattr or options.activate:
        givenname = options.gn
        lastname = options.sn
        gecos = options.gecos
        directory = options.directory
        mail = options.mail
        shell = options.shell
    else:
        if not options.gn:
            givenname = ipautil.user_input("First name", user.getValue('givenname'), allow_empty = False)
        else:
            givenname = options.gn
            if (not ipavalidate.String(givenname, notEmpty=True)):
                print "Please enter a value"
                return 1

        if not options.sn:
            lastname = ipautil.user_input("Last name", user.getValue('sn'), allow_empty = False)
        else:
            lastname = options.sn
            if (not ipavalidate.String(lastname, notEmpty=True)):
                print "Please enter a value"
                return 1

        if not options.mail:
            mail = ipautil.user_input_email("E-mail address", user.getValue('mail'), allow_empty = True)
        else:
            mail = options.mail
            if (not ipavalidate.Email(mail)):
                print "E-mail must include a user and domain name"
                return 1

        # Ask the questions we don't normally force. We don't require answers
        # for these.
        if not options.gecos:
            gecos = ipautil.user_input("gecos", user.getValue('gecos'))

        if not options.directory:
            directory = ipautil.user_input_path("Home directory", user.getValue('homeDirectory'))
        if not options.shell:
            shell = ipautil.user_input("Shell", user.getValue('loginshell'), allow_empty = False)

    if givenname:
        user.setValue('givenname', givenname)
    if lastname:
        user.setValue('sn', lastname)
    if mail:
        user.setValue('mail', mail)

    if gecos:
        user.setValue('gecos', gecos)
    if directory:
        user.setValue('homedirectory', directory)
    if shell:
        user.setValue('loginshell', shell)

    if options.delattr:
        for d in options.delattr:
            user.delValue(d)

    if options.setattr:
        for s in options.setattr:
            s = s.split('=', 1)
            if len(s) != 2:
                set_add_usage("set")
                sys.exit(1)
            (attr,value) = s
            user.setValue(attr, value)

    if options.addattr:
        for a in options.addattr:
            a = a.split('=', 1)
            if len(a) != 2:
                set_add_usage("add")
                sys.exit(1)
            (attr,value) = a
            cvalue = user.getValues(attr)
            if cvalue:
                if isinstance(cvalue,str):
                    cvalue = [cvalue]
                value = cvalue + [value]
            user.setValue(attr, value)

    if options.activate:
        try:
            client.mark_user_active(user.getValues('uid'))
            print "User activated successfully."
        except ipa.ipaerror.exception_for(ipa.ipaerror.LDAP_EMPTY_MODLIST):
            print "User is already marked active"
            return 0
        except:
            raise

    client.update_user(user)

    print username + " successfully updated"
    return 0

try:
    if __name__ == "__main__":
        sys.exit(main())
except SystemExit, e:
    sys.exit(e)
except KeyboardInterrupt, e:
    sys.exit(1)
except xmlrpclib.Fault, fault:
    if fault.faultCode == errno.ECONNREFUSED:
        print "The IPA XML-RPC service is not responding."
    else:
        print fault.faultString
    sys.exit(1)
except kerberos.GSSError, e:
    print "Could not initialize GSSAPI: %s/%s" % (e[0][0], e[0][1])
    sys.exit(1)
except xmlrpclib.ProtocolError, e:
    print "Unable to connect to IPA server: %s" % (e.errmsg)
    sys.exit(1)
except ipa.ipaerror.IPAError, e:
    print "%s" % (e.msg)
    sys.exit(1)
except socket.error, e:
    print e[1]
    print "Re-run with -v flag for more details."
except Exception, e:
    print "%s" % str(e)
    sys.exit(1)
