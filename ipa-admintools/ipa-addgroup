#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
import sys
try:
    from optparse import OptionParser
    import ipa
    import ipa.group
    import ipa.ipaclient as ipaclient
    import ipa.ipavalidate as ipavalidate
    import ipa.ipautil as ipautil
    import ipa.config
    import ipa.ipaerror

    import xmlrpclib
    import kerberos
    import ldap
    import errno
except ImportError:
    print >> sys.stderr, """\
There was a problem importing one of the required Python modules. The
error was:

    %s
""" % sys.exc_value
    sys.exit(1)

def usage():
    print "ipa-addgroup [-d|--description STRING] [-g|--gid GID] [-v|--verbose] group"
    sys.exit(1)

def parse_options():
    parser = OptionParser()
    parser.add_option("-d", "--description", dest="desc",
                      help="A description of this group")
    parser.add_option("-g", "--gid", dest="gid",
                      help="The gid to use for this group. If not included one is automatically set.")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                      help="Verbose output of the XML-RPC connection")
    parser.add_option("--usage", action="store_true",
                      help="Program usage")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def main():
    cn = ""
    desc = ""

    group=ipa.group.Group()
    options, args = parse_options()

    if options.usage:
        usage()

    cont = False

    if (len(args) != 2):
        while (cont != True):
            cn = raw_input("Group name: ")
            if (ipavalidate.String(cn, notEmpty=True)):
                print "Please enter a value"
            else:
                cont = True
    else:
        cn = args[1]
        if (ipavalidate.String(cn, notEmpty=True)):
            print "Please enter a value"
            return 1

    cont = False
    if not options.desc:
        while (cont != True):
            desc = raw_input("Description: ")
            if (ipavalidate.String(desc, notEmpty=True)):
                print "Please enter a value"
            else:
                cont = True
    else:
        desc = options.desc
        if (ipavalidate.String(desc, notEmpty=True)):
            print "Please enter a value"
            return 1

    if options.gid:
        group.setValue('gidnumber', options.gid)

    group.setValue('cn', cn)
    group.setValue('description', desc)

    client = ipaclient.IPAClient()
    client.add_group(group)
    print cn + " successfully added"

    return 0

try:
    if __name__ == "__main__":
        sys.exit(main())
except SystemExit, e:
    sys.exit(e)
except KeyboardInterrupt, e:
    sys.exit(1)
except xmlrpclib.Fault, fault:
    if fault.faultCode == errno.ECONNREFUSED:
        print "The IPA XML-RPC service is not responding."
    else:
        print fault.faultString
    sys.exit(1)
except kerberos.GSSError, e:
    print "Could not initialize GSSAPI: %s/%s" % (ipautil.get_gsserror(e))
    sys.exit(1)
except xmlrpclib.ProtocolError, e:
    print "Unable to connect to IPA server: %s" % (e.errmsg)
    sys.exit(1)
except ipa.ipaerror.IPAError, e:
    print "%s" % (e.message)
    sys.exit(1)
except Exception, e:
    print "%s" % str(e)
    sys.exit(1)
