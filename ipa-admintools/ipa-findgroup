#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
import sys
try:
    from optparse import OptionParser
    import ipa.ipaclient as ipaclient
    import ipa.ipaadminutil as ipaadminutil
    import ipa.ipautil as ipautil
    import ipa.config

    import errno
    import sys
    import xmlrpclib
    import kerberos
    import socket
except ImportError:
    print >> sys.stderr, """\
There was a problem importing one of the required Python modules. The
error was:

    %s
""" % sys.exc_value
    sys.exit(1)

def usage():
    print "ipa-findgroup [-a|--all] [-n|--notranslate] [-v|--verbose] group"
    sys.exit()

def parse_options():
    parser = OptionParser()

    parser.add_option("-a", "--all", action="store_true", dest="all",
                      help="Show all group attributes")
    parser.add_option("-n", "--notranslate", action="store_true",
                      dest="notranslate",
                      help="Don't translate LDAP attributes into readable labels")
    parser.add_option("--usage", action="store_true",
                      help="Program usage")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                      help="Verbose output of the XML-RPC connection")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def main():
    group={}
    options, args = parse_options()

    if options.usage or len(args) != 2:
        usage()

    client = ipaclient.IPAClient()
    if options.all is None:
        groups = client.find_groups(args[1], ['cn','description','gidnumber','nsAccountLock'])
    else:
        groups = client.find_groups(args[1], sattrs=['*','nsAccountLock'])

    counter = groups[0]
    groups = groups[1:]
    groupindex = -1
    if counter == 0:
        print "No entries found for", args[1]
        return 2
    elif counter == -1:
        print "These results are truncated."
        print "Please refine your search and try again."

    if counter > 1:
        try:
            groupindex = ipaadminutil.select_group(counter, groups)
        except KeyboardInterrupt:
            return 1
        if groupindex == "q":
            return 0

    if groupindex >= 0:
        groups = [groups[groupindex]]

    for ent in groups:
        try:
            members = client.group_members(ent.dn, ['dn','cn'], 0)
        except ipa.ipaerror.IPAError, e:
            print "Error getting members for " + ent.dn
            print str(e)
            continue
        attr = ent.attrList()
        if options.notranslate:
            labels = {}
            for a in attr:
                labels[a] = a
        else:
            labels = client.attrs_to_labels(attr)

        print "dn: " + ent.dn

        for a in attr:
            value = ent.getValues(a)
            if isinstance(value,str):
                print labels[a] + ": " + value
            else:
                print labels[a] + ": "
                for l in value:
                    print "\t" +  l

        counter = members[0]
        members = members[1:]

        if counter > 0:
            print "Members:"
            for m in members:
                print "    " + m.getValue('cn') + ": " + m.dn
        # blank line between results
        print 

    return 0

try:
    if __name__ == "__main__":
        sys.exit(main())
except SystemExit, e:
    sys.exit(e)
except KeyboardInterrupt, e:
    sys.exit(1)
except xmlrpclib.Fault, fault:
    if fault.faultCode == errno.ECONNREFUSED:
        print "The IPA XML-RPC service is not responding."
    else:
        print fault.faultString
    sys.exit(1)
except kerberos.GSSError, e:
    print "Could not initialize GSSAPI: %s/%s" % (ipautil.get_gsserror(e))
    sys.exit(1)
except xmlrpclib.ProtocolError, e:
    print "Unable to connect to IPA server: %s" % (e.errmsg)
    sys.exit(1)
except ipa.ipaerror.IPAError, e:
    print "%s" % (e.message)
    sys.exit(1)
except socket.error, e:
    print e[1]
    print "Re-run with -v flag for more details."
except Exception, e:
    print "%s" % str(e)
    sys.exit(1)
