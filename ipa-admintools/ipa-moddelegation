#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
import sys
try:
    from optparse import OptionParser
    import ipa
    import ipa.ipaclient as ipaclient
    import ipa.ipaadminutil as ipaadminutil
    import ipa.config
    import ipa.aci
    import ipa.ipautil as ipautil

    import xmlrpclib
    import kerberos
    import krbV
    import ldap
    import copy
    import errno
except ImportError:
    print >> sys.stderr, """\
There was a problem importing one of the required Python modules. The
error was:

    %s
""" % sys.exc_value
    sys.exit(1)

aci_fields = ['*', 'aci']

def usage():
    print "ipa-moddelegation [-l|--list]"
    print "ipa-moddelegation [-a|--attributes attr1,attr2,..,attrn] [-s|--source STRING] [-t|--target STRING] [-v|--verbose] name"
    sys.exit(1)

def parse_options():
    parser = OptionParser()
    parser.add_option("-a", "--attributes", dest="attributes",
                      help="The attributes the source group may change in the target group")
    parser.add_option("-l", "--list", dest="list", action="store_true",
                      help="List common attributes (this is not an exhaustive list)")
    parser.add_option("-s", "--source", dest="source",
                      help="The source group name")
    parser.add_option("-t", "--target", dest="target",
                      help="The target group name")
    parser.add_option("--usage", action="store_true",
                      help="Program usage")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                      help="Verbose output of the XML-RPC connection")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def main():

    options, args = parse_options()

    if options.list:
        client = ipaclient.IPAClient()
        l = client.get_all_attrs()

        for x in l:
            print x
        return 0

    if options.usage or len(args) != 2:
        usage()

    if not options.attributes and not options.source and not options.target:
        usage()

    client = ipaclient.IPAClient()

    # first do some sanity checking

    if options.source:
        source_grp = client.find_groups(options.source)
        counter = source_grp[0]
        source_grp = source_grp[1:]
        groupindex = -1
        if counter == 0:
            print "No entries found for %s" % options.source
            return 2 
        elif counter == -1:
            print "These results are truncated."
            print "Please refine your search and try again."
            return 3

        if counter > 1:
            print "\nMultiple entries for the source group found."
            groupindex = ipaadminutil.select_group(counter, source_grp)
            if groupindex == "q":
                return 0

        if groupindex >= 0:
            source_grp = [source_grp[groupindex]]

    if options.target:
        target_grp = client.find_groups(options.target)
        counter = target_grp[0]
        target_grp = target_grp[1:]
        groupindex = -1
        if counter == 0:
            print "No entries found for %s" % options.target
            return 2 
        elif counter == -1:
            print "These results are truncated."
            print "Please refine your search and try again."
            return 3

        if counter > 1:
            print "\nMultiple entries for the target group found."
            groupindex = ipaadminutil.select_group(counter, target_grp)
            if groupindex == "q":
                return 0

        if groupindex >= 0:
            target_grp = [target_grp[groupindex]]

    if options.attributes:
        attr_list = options.attributes.split(',')

    # find the old aci

    aci_entry = client.get_aci_entry(aci_fields)

    aci_str_list = aci_entry.getValues('aci')
    if aci_str_list is None:
        aci_str_list = []
    if not(isinstance(aci_str_list,list) or isinstance(aci_str_list,tuple)):
        aci_str_list = [aci_str_list]

    old_aci = None
    acistr = None
    aci_list = []
    for aci_str in aci_str_list:
        try:
            old_aci = ipa.aci.ACI(aci_str)
            if old_aci.name == args[1]:
                acistr = aci_str
                orig_group = old_aci.source_group
            else:
                aci_list.append(old_aci)
        except SyntaxError:
            # ignore aci_str's that ACI can't parse
            pass

    if acistr is None:
        print "No delegation %s found." % args[1]
        return 2

    old_aci_index = aci_str_list.index(acistr)

    new_aci = ipa.aci.ACI()
    new_aci.name = args[1]
    if options.source:
        new_aci.source_group = source_grp[0].dn
    else:
        new_aci.source_group = old_aci.source_group
    if options.target:
        new_aci.dest_group = target_grp[0].dn
    else:
        new_aci.dest_group = old_aci.dest_group
    if options.attributes:
        new_aci.attrs = attr_list
    else:
        new_aci.attrs = old_aci.attrs
    new_aci_str = new_aci.export_to_string()

    new_aci_str_list = copy.deepcopy(aci_str_list)
    new_aci_str_list[old_aci_index] = new_aci_str
    aci_entry.setValue('aci', new_aci_str_list)

    client.update_entry(aci_entry)

    if options.source:
        last = True
        # If this is the last delegation for a group, remove it from editors
        for a in aci_list:
            if orig_group == a.source_group:
                last = False
                break

        if last:
            group = client.get_entry_by_cn("editors")
            client.remove_member_from_group(orig_group, group.dn)

        # Now add to the editors group so they can make changes in the UI
        try:
            group = client.get_entry_by_cn("editors")
            client.add_group_to_group(new_aci.source_group, group.dn)
        except ipa.ipaerror.exception_for(ipa.ipaerror.LDAP_EMPTY_MODLIST):
            # This is ok, ignore it
            pass

    print "Delegation %s successfully updated" % args[1]
    return 0

try:
    if __name__ == "__main__":
        sys.exit(main())
except SystemExit, e:
    sys.exit(e)
except KeyboardInterrupt, e:
    sys.exit(1)
except xmlrpclib.Fault, fault:
    if fault.faultCode == errno.ECONNREFUSED:
        print "The IPA XML-RPC service is not responding."
    else:
        print fault.faultString
    sys.exit(1)
except kerberos.GSSError, e:
    print "Could not initialize GSSAPI: %s/%s" % (ipautil.get_gsserror(e))
    sys.exit(1)
except xmlrpclib.ProtocolError, e:
    print "Unable to connect to IPA server: %s" % (e.errmsg)
    sys.exit(1)
except ipa.ipaerror.IPAError, e:
    print "%s" % (e.message)
    sys.exit(1)
except Exception, e:
    print "%s" % str(e)
    sys.exit(1)
